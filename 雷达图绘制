import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

# 读取Excel数据
data = pd.read_csv(r'xxxx')  # 替换为你的文件路径

# 选择需要的八个指标和分类列，并新增 bus_cost
indicators = ['bus_count', 'subway_count', 'subway_distance',
              'taxi_count', 'taxi_distance', 'bike_count',
              'bike_duration', 'ferry_count', 'bus_cost']
cluster_col = 'cluster'

# 排除 Cluster 为 -1 的行
data_filtered = data[data[cluster_col] != -1]

# 假设 bus_cost 是基于某些现有列计算的
# 这里是一个示例，你需要根据实际情况修改
# data_filtered['bus_cost'] = (data_filtered['bus_count'] * 1.2 + data_filtered['taxi_count'] * 0.8) / 2

# 归一化处理：将九个指标的数据缩放到 [0, 1]，仅对过滤后的数据进行处理
scaler = MinMaxScaler()
data_filtered[indicators] = scaler.fit_transform(data_filtered[indicators])

# 创建标签（将第一个下划线替换为换行符）
labels = [col.replace("_", "\n", 1) for col in indicators]

# 获取唯一的类别并按数值排序
clusters = sorted(data_filtered[cluster_col].unique())

# 绘制雷达图的函数
def plot_radar_chart(ax, data_subset, labels, color):
    num_vars = len(labels)
    angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1]

    ax.set_theta_offset(np.pi / 2)
    ax.set_theta_direction(-1)

    for index, row in data_subset.iterrows():
        values = row[indicators].tolist()
        values += values[:1]
        ax.plot(angles, values, color=color, linewidth=1, alpha=0.7)
        ax.fill(angles, values, color=color, alpha=0.1)

    ax.set_thetagrids(np.degrees(angles[:-1]), labels, fontsize=8)
    ax.set_ylim(0, 1)
    ax.yaxis.set_tick_params(labelsize=8, width=2, pad=-20)
    ax.set_yticks([0.2, 0.4, 0.6, 0.8, 1])
    ax.set_yticklabels([0.2, 0.4, 0.6, 0.8, 1], fontsize=8)

# 生成动态颜色映射
colors = plt.cm.get_cmap('tab10', len(clusters))

# 设置子图的行数和列数为 2 行 3 列（根据你的需求调整）
rows = 4
cols = 5

# 创建子图
fig, axes = plt.subplots(rows, cols, figsize=(20, 12),
                        subplot_kw=dict(polar=True),
                        gridspec_kw={'wspace': 0.8, 'hspace': 0.9})

# 让axes是一个一维的数组
axes = axes.flatten()

# 为每个类别绘制雷达图并添加标题
for i, cluster in enumerate(clusters):
    cluster_data = data_filtered[data_filtered[cluster_col] == cluster][indicators]
    plot_radar_chart(axes[i], cluster_data, labels, colors(i))
    axes[i].set_title(f'Cluster {cluster}', fontsize=12, y=1.3, fontweight='bold', pad=5, loc='center')

# 隐藏多余的子图
for j in range(len(clusters), len(axes)):
    axes[j].axis('off')

# 调整布局
plt.tight_layout()
plt.show()
