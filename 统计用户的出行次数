import pandas as pd

# 读取 Excel 文件

df = pd.read_csv(r'xxx')

# 确保日期列为 datetime 格式
if 'travel_start_time' in df.columns:
    df['travel_start_time'] = pd.to_datetime(df['travel_start_time'])
else:
    raise KeyError("数据中没有 'travel_start_time' 列，请检查数据文件。")

# 按照 uid 和 travel_start_time 排序
df = df.sort_values(by=['uid', 'travel_start_time'])

# 定义统计出行次数的函数
def count_trips_fixed_window(user_data, days_window):
    """
    统计用户在从第一天起固定时间窗口内的总出行次数
    :param user_data: 用户的出行记录数据
    :param days_window: 时间窗口（如1天、3天、7天等）
    :return: 窗口内总出行次数
    """
    user_data = user_data.copy()
    user_data['day'] = user_data['travel_start_time'].dt.date

    # 获取用户的第一天
    start_date = user_data['day'].min()
    end_date = start_date + pd.Timedelta(days=days_window - 1)

    # 筛选时间窗口内的数据
    trips_in_window = user_data[(user_data['day'] >= start_date) & (user_data['day'] <= end_date)]

    # 返回总出行次数
    return len(trips_in_window)

# 定义统计出行次数区间的变量
distributions = {
    '1_day': [0] * 7,   # 对应 0-5次, 6-10次, ..., 50次以上
    '3_days': [0] * 7,
}

# 定义分布范围
bins = [0, 1, 2, 3, 4, 5, 10, 20, float('inf')]

# 存储用户统计结果
final_results = []

# 遍历每个用户
for uid, user_data in df.groupby('uid'):
    # 初始化用户统计数据
    user_stats = {'uid': uid}

    # 遍历每个时间窗口（包括新增的1天）
    for key, days_window in zip(['1_day', '3_days'], [1, 3,]):
        # 统计当前时间窗口内的出行次数
        total_trips = count_trips_fixed_window(user_data, days_window)

        # 保存用户的统计数据
        user_stats[f'travel_count_{key}'] = total_trips

        # 更新分布统计
        for i in range(len(bins) - 1):
            if bins[i] < total_trips <= bins[i + 1]:
                distributions[key][i] += 1
                break

    # 保存用户统计结果
    final_results.append(user_stats)

# 将所有用户的数据合并成一个 DataFrame
final_df = pd.DataFrame(final_results)

# 输出分布统计结果到控制台
print("各时间窗口出行次数分布统计：")
for key, dist in distributions.items():
    print(f"{key}:")
    print(f"  0次: {dist[0]} 人")
    print(f"  1次: {dist[1]} 人")
    print(f"  2次: {dist[2]} 人")
    print(f"  3次: {dist[3]} 人")
    print(f"  4次: {dist[4]} 人")
    print(f"  5次: {dist[5]} 人")
    print(f"  10次: {dist[6]} 人")
    print(f"  20次: {dist[7]} 人")
    print()




